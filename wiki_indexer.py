# -*- coding: utf-8 -*-
"""wikiPedia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NJzAYW0tLvN56LAuCempaOcZxBOUTRE6
"""


import sys
import time
import os
import xml.sax
import re
from collections import defaultdict
import math
import bisect
import nltk
from nltk.stem import *
from nltk.stem.snowball import SnowballStemmer
from nltk.tokenize import RegexpTokenizer
import pickle
# nltk.download('porter')
# nltk.download('stopwords')
# from nltk.corpus import stopwords
from nltk.stem.porter import *
from nltk.stem import PorterStemmer as porter
import operator
# import heapq
# import json
# import spacy
# from collections import OrderedDict

stopwords=["a", "about", "above", "above", "across", "after", "afterwards", "again",
           "against", "all", "almost", "alone", "along", "already", "also","although",
           "always","am","among", "amongst", "amoungst", "amount",  "an", "and", "another",
           "any","anyhow","anyone","anything","anyway", "anywhere", "are", "around", "as",
           "at", "back","be","became", "because","become","becomes", "becoming", "been",
           "before", "beforehand", "behind", "being", "below", "beside", "besides",
           "between", "beyond", "bill", "both", "bottom","but", "by", "call", "can",
           "cannot", "cant", "co", "con", "could", "couldnt", "cry", "de", "describe",
           "detail", "do", "done", "down", "due", "during", "each", "eg", "eight", "either",
           "eleven","else", "elsewhere", "empty", "enough", "etc", "even", "ever", "every",
           "everyone", "everything", "everywhere", "except", "few", "fifteen", "fify", "fill",
           "find", "fire", "first", "five", "for", "former", "formerly", "forty", "found",
           "four", "from", "front", "full", "further", "get", "give", "go", "had", "has",
           "hasnt", "have", "he", "hence", "her", "here", "hereafter", "hereby", "herein",
           "hereupon", "hers", "herself", "him", "himself", "his", "how", "however", "hundred",
           "ie", "if", "in", "inc", "indeed", "interest", "into", "is", "it", "its", "itself",
           "keep", "last", "latter", "latterly", "least", "less", "ltd", "made", "many", "may",
           "me", "meanwhile", "might", "mill", "mine", "more", "moreover", "most", "mostly",
           "move", "much", "must", "my", "myself", "name", "namely", "neither", "never",
           "nevertheless", "next", "nine", "no", "nobody", "none", "noone", "nor", "not",
           "nothing", "now", "nowhere", "of", "off", "often", "on", "once", "one", "only",
           "onto", "or", "other", "others", "otherwise", "our", "ours", "ourselves", "out",
           "over", "own","part", "per", "perhaps", "please", "put", "rather", "re", "same",
           "see", "seem", "seemed", "seeming", "seems", "serious", "several", "she", "should",
           "show", "side", "since", "sincere", "six", "sixty", "so", "some", "somehow", "someone",
           "something", "sometime", "sometimes", "somewhere", "still", "such", "system", "take",
           "ten", "than", "that", "the", "their", "them", "themselves", "then", "thence", "there",
           "thereafter", "thereby", "therefore", "therein", "thereupon", "these", "they", "thickv",
           "thin", "third", "this", "those", "though", "three", "through", "throughout", "thru",
           "thus", "to", "together", "too", "top", "toward", "towards", "twelve", "twenty", "two",
           "un", "under", "until", "up", "upon", "us", "very", "via", "was", "we", "well", "were",
           "what", "whatever", "when", "whence", "whenever", "where", "whereafter", "whereas",
           "whereby", "wherein", "whereupon", "wherever", "whether", "which", "while", "whither",
           "who", "whoever", "whole", "whom", "whose", "why", "will", "with", "within", "without",
           "would", "yet", "you", "your", "yours", "yourself", "yourselves"
]





# nlp = spacy.load('en')
stemmer = SnowballStemmer("english")
# STOP_WORDS = spacy.lang.en.stop_words.STOP_WORDS

regExp1 = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+',re.DOTALL)
regExp2 = re.compile(r'{\|(.*?)\|}',re.DOTALL)
regExp3 = re.compile(r'{{v?cite(.*?)}}',re.DOTALL)
regExp4 = re.compile(r'[-.,:;_?()"/\']',re.DOTALL)
regExp5 = re.compile(r'\[\[file:(.*?)\]\]',re.DOTALL)
regExp6 = re.compile(r'[\'~` \n\"_!=@#$%-^*+{\[}\]\|\\<>/?]',re.DOTALL)
catRegExp = r'\[\[category:(.*?)\]\]'
infoRegExp = r'{{infobox(.*?)}}'
refRegExp = r'== ?references ?==(.*?)=='
regExp7 = re.compile(infoRegExp,re.DOTALL)
regExp8 = re.compile(refRegExp,re.DOTALL)
regExp9 = re.compile(r'{{(.*?)}}',re.DOTALL)
regExp10 = re.compile(r'<(.*?)>',re.DOTALL)

indexTable  = {}
wordCount = 0

# def cleanData(data):
#   # Tokenisation -> lower -> stopWords -> stemming
#   data = data.lower()
#   data = tokenizeWords(data)
#   words = []
#   for token in data:
#       token = stemmer.stem(token)
#       if len(token) <= 1 or token in stopwords:
#           continue
#       words.append(token)
#   return words

# def tokenizeWords(data):
#     # data = data.lower()
#     tokenizer = RegexpTokenizer(r'[a-zA-Z0-9_]+')
#     return tokenizer.tokenize(data)

def body(data):
  global wordCount
  listOfBodyWords = []
  data = data.lower()
  data = regExp1.sub(' ', data)
  data = regExp2.sub(' ', data)
  data = regExp3.sub(' ', data)
  data = regExp10.sub(' ', data)
  data = data.replace('\'', '')
  data = data.strip()
  data.replace('\n', ' ')
  data = regExp4.sub(' ', data)
  data = regExp5.sub(' ', data)
  data = regExp6.sub(' ', data)
  data = regExp7.sub(' ', data)
  data = tokenizeWords(data)
  # data = data.split()
  for token in data :
    wordCount += 1
    if token not in stopwords:
      # listOfBodyWords.append(stemmer.stem(token))
      listOfBodyWords.append((token))

  return listOfBodyWords



# def body(data):
#     dataLines = data.split("\n")

#     totalLines = len(dataLines)
    
#     databody=[]
#     flag=True
#     if totalLines > 1:
#       for i in range(totalLines):
#           if(flag):
#               if("[[category" in dataLines[i] or "==external links==" in dataLines[i]):
#                   flag = False
#               else:
#                   databody+=cleanData(dataLines[i])
#     return databody

def tokenizeWords(data):
    # data = data.lower()
    tokenizer = RegexpTokenizer(r'[a-zA-Z0-9_]+')
    return tokenizer.tokenize(data)

def cleanData(data):
  global wordCount
  # Tokenisation -> lower -> stopWords -> stemming
  data = data.lower()
  data = tokenizeWords(data)
 
  words = []
  for token in data:
      wordCount += 1
      # token = stemmer.stem(token)
      token = (token)
      if len(token) <= 1 or token in stopwords:
          continue
      # token = token.lower()  
      words.append(token)
  return words



def infoBox(data):
  infoSection = data.split("{{Infobox")
  litsOfWordinInfobox = []
  if(len(infoSection) > 1):
    for line in range(1,len(infoSection)):
      eachWord = infoSection[line].split('\n')
      for word in eachWord:
        if( word == "}}"):
          break
        preProcessWord = cleanData(word)
        litsOfWordinInfobox += preProcessWord
  return litsOfWordinInfobox

def category(data):
   listOfWordsinCategory = []
   categorySection = re.findall(r"\[\[Category:(.*)\]\]", str(data))
   for word in categorySection:
     listOfWordsinCategory += cleanData(word)
   return listOfWordsinCategory

def external(data):
  externalLinksWords = []
  externalLinkSection = data.split("==External links==")
  if(len(externalLinkSection)) > 1:
    externalLinkSection = externalLinkSection[1].split("\n")
    for word in externalLinkSection:
      if  word:
        if word[0]=='*' :
          externalLinksWords += cleanData(word) 
  return externalLinksWords 

def reference(data):
  referenceListWords = []
  referenceLinkSection = data.split("==References==")
  if len(referenceLinkSection) > 1:
    referenceLinkSection = referenceLinkSection[1]
    referenceLinkSection = referenceLinkSection.split("\n")

    for references in referenceLinkSection:
      if ("[[Category" in references):
          break
      if ("==" in references):
        break
      if ("DEFAULTSORT" in references):
        break
        
      reference = cleanData(references)
      if "reflist" in reference:
          reference.remove("reflist")
      referenceListWords += reference
  
  return referenceListWords




def getAllsection(title,data):

  # get list of word belong to each section
  litsOfWordinInfobox = infoBox(data)
  listOfWordsinCategory  = category(data)
  externalLinksWords = external(data)
  referenceListWords = reference(data)
  listOfBodyWords   =   body(data)
  listOfTitlsWords = []

  for words in title:
    listOfTitlsWords += cleanData(title)


  return listOfTitlsWords , litsOfWordinInfobox , listOfWordsinCategory , externalLinksWords , referenceListWords , listOfBodyWords

def getMap(words):
  wordMap = {}
  for word in words:
    if word not in wordMap:
      wordMap[word] = 1
    else:
      wordMap[word] += 1
  return wordMap



def saveAndPreprocess(title , text , docId):
  title , infoMap , categoryMap , externalData , referenceMap  , bodyMap= getAllsection(title , text)
  
  titleMap = getMap(title)
  categoryMap = getMap(categoryMap)
  bodyMap = getMap(bodyMap)
  infoMap = getMap(infoMap)
  referenceMap = getMap(referenceMap)
  externalData = getMap(externalData)

  
  for word in externalData:
    if word not in indexTable:
      indexTable[word] ={}
    if docId not in indexTable[word]:
      indexTable[word][docId] =  {}
    indexTable[word][docId]["externalData"] = externalData[word]
    

  for word in referenceMap:
    if word not in indexTable:
      indexTable[word] ={}
    if docId not in indexTable[word]:
      indexTable[word][docId] = {}
    indexTable[word][docId]["referenceMap"] = referenceMap[word]

  for word in infoMap:
    if word not in indexTable:
      indexTable[word] = {}
    if docId not in indexTable[word]:
      indexTable[word][docId] = {}
    indexTable[word][docId]["infoMap"] = infoMap[word]

  for word in bodyMap:
    if word not in indexTable:
      indexTable[word] = {}
    if docId not in indexTable[word]:
      indexTable[word][docId] = {}
    indexTable[word][docId]["bodyMap"] = bodyMap[word]


  for word in categoryMap:
    if word not in indexTable:
      indexTable[word] = {}
    if docId not in indexTable[word]:
      indexTable[word][docId] = {}
    indexTable[word][docId]["categoryMap"] = categoryMap[word]


  for word in titleMap:
    if word not in indexTable:
      indexTable[word] = {}
    if docId not in indexTable[word]:
      indexTable[word][docId] = {}
    indexTable[word][docId]["titleMap"] = titleMap[word]

def saveToText(fp):
  toText = None
  for word in sorted(indexTable):
    toText = word + ':'
    for docId in sorted(indexTable[word]):
      toText += str(docId)
      
      if "infoMap" in indexTable[word][docId] and indexTable[word][docId]["infoMap"]>0:
        toText += 'i'
        toText += str(indexTable[word][docId]["infoMap"])
      
      if "referenceMap" in indexTable[word][docId] and indexTable[word][docId]["referenceMap"]>0:
        toText += 'r'
        toText += str(indexTable[word][docId]["referenceMap"])
      
      if "bodyMap" in indexTable[word][docId] and indexTable[word][docId]["bodyMap"]>0:
        toText += 'b'
        toText += str(indexTable[word][docId]["bodyMap"])
      
      if "categoryMap" in indexTable[word][docId] and indexTable[word][docId]["categoryMap"]>0:
        toText += 'c'
        toText += str(indexTable[word][docId]["categoryMap"])
      
      if "titleMap" in indexTable[word][docId] and indexTable[word][docId]["titleMap"]>0:
        toText += 't'
        toText += str(indexTable[word][docId]["titleMap"])

      toText += ' '
    fp.write(toText + "\n")

docNo = 0

class Documenthandler( xml.sax.ContentHandler ):
  def __init__(self):
   self.current_tag = ""
   self.title = ""
   self.docId = 0
   self.body = ""
   self.counter = 0
   self._pages = []
  
  def startElement(self, tag, attributes):
   self.current_tag = tag
  
  def endElement(self, tag):
   if tag == "page":
    #  save_details_of_document(self)
     saveAndPreprocess(self.title,self.body , self.docId)
     self._pages.append((self.title,self.body))
     self.title = ""
     self.docId += 1
     docNo = self.docId
    #  print(self.docId)
     self.body = ""
    
  
  def characters(self, content):
    if self.current_tag == "title":
      self.title += content
    if self.current_tag == "text":
      self.body += content

		# if self.current_tag == "id":
		# 	if self.id == "":
		# 		self.id = content


startTime = time.time()
parser = xml.sax.make_parser()
parser.setFeature(xml.sax.handler.feature_namespaces, 0)
Handler = Documenthandler()
parser.setContentHandler( Handler )

dumpfile = sys.argv[1]

os.mkdir(sys.argv[2])
outputFile = sys.argv[2]

statisticsFile = sys.argv[3]

parser.parse(dumpfile)
filePath = outputFile + "index.txt"

filestartTime = time.time()
fp = open(filePath, "a")
saveToText(fp)
fp.close()


sf = open(statisticsFile,"a")
sf.write(str(wordCount) + "\n")
sf.write(str(len(indexTable)))
sf.close

# print(len(indexTable))
# print("Total time to write in file: " + str(time.time() - filestartTime))
# print("Total time : " + str(time.time() - startTime))




